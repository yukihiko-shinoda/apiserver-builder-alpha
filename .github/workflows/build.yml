name: build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  bazel:
    runs-on: ubuntu-latest
    name: Bazel Build
    steps:
      - name: Set up Golang
        uses: actions/setup-go@v2.0.3
        with:
          go-version: 1.15
      - uses: actions/checkout@v2.3.1
        with:
          path: go/src/sigs.k8s.io/apiserver-builder-alpha/
      - name: Install bazelisk
        env:
          GOPATH: ${{ github.workspace }}/go
        run: |
          go get github.com/bazelbuild/bazelisk
          go install github.com/bazelbuild/bazelisk
      - name: Install
        working-directory: ${{ github.workspace }}/go/src/sigs.k8s.io/apiserver-builder-alpha/
        env:
          GOPATH: ${{ github.workspace }}/go
        run: |
          ${GOPATH}/bin/bazelisk
          make install
  new:
    runs-on: ubuntu-latest
    name: Testing New Projects
    steps:
      - name: Set up Golang
        uses: actions/setup-go@v2.0.3
        with:
          go-version: 1.15
      - uses: actions/checkout@v2.3.1
        with:
          path: go/src/sigs.k8s.io/apiserver-builder-alpha/
      - name: Install
        working-directory: ${{ github.workspace }}/go/src/sigs.k8s.io/apiserver-builder-alpha/
        env:
          GOPATH: ${{ github.workspace }}/go
        run: |
          go build -o ${GOPATH}/bin/apiserver-boot ./cmd/apiserver-boot/main.go
      - name: Testing on new project
        env:
          GOBIN: ${{ github.workspace }}/go/bin
        run: |
          mkdir -p test
          cp ${{ github.workspace }}/go/src/sigs.k8s.io/apiserver-builder-alpha/Makefile.test test/
          cd test
          touch boilerplate.go.txt

          export PATH=${PATH}:${GOBIN}
          make test -f Makefile.test
  basic-example-build:
    runs-on: ubuntu-latest
    name: Testing Basic Example
    steps:
      - name: Set up Golang
        uses: actions/setup-go@v2.0.3
        with:
          go-version: 1.15
      - run: |
          go get sigs.k8s.io/controller-tools/cmd/controller-gen
          go install sigs.k8s.io/controller-tools/cmd/controller-gen
      - uses: actions/checkout@v2.3.1
        with:
          path: go/src/sigs.k8s.io/apiserver-builder-alpha/
      - name: Testing on examples
        working-directory: ${{ github.workspace }}/go/src/sigs.k8s.io/apiserver-builder-alpha/example/basic
        env:
          GOPATH: ${{ github.workspace }}/go
          GOBIN: ${{ github.workspace }}/go/bin
        run: |
          controller-gen  +object +paths=./pkg/apis/...
          export PATH=${PATH}:${GOBIN}
          go test ./pkg/...
  basic-example-container:
    runs-on: ubuntu-latest
    name: Testing Basic Example Container Build
    steps:
      - name: Set up Golang
        uses: actions/setup-go@v2.0.3
        with:
          go-version: 1.15
      - uses: actions/checkout@v2.3.1
        with:
          path: go/src/sigs.k8s.io/apiserver-builder-alpha/
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.0.0
      - name: Install apiserver-boot
        working-directory: ${{ github.workspace }}/go/src/sigs.k8s.io/apiserver-builder-alpha/
        env:
          GOPATH: ${{ github.workspace }}/go
        run: |
          go build -o ${GOPATH}/bin/apiserver-boot ./cmd/apiserver-boot/main.go
      - name: Install controller-tools
        run: |
          go get sigs.k8s.io/controller-tools/cmd/controller-gen
          go install sigs.k8s.io/controller-tools/cmd/controller-gen
      - name: Building and running container images
        working-directory: ${{ github.workspace }}/go/src/sigs.k8s.io/apiserver-builder-alpha/example/basic
        env:
          GOPATH: ${{ github.workspace }}/go
          GOBIN: ${{ github.workspace }}/go/bin
        run: |
          export PATH=${PATH}:${GOBIN}
          controller-gen  +object +paths=./pkg/apis/...

          export IMAGE="example.io/basic"
          apiserver-boot build container --image ${IMAGE}
          kind load docker-image ${IMAGE} --name chart-testing

          kubectl create -f config/

          sleep 120 # Hold for 2 min

          kubectl api-resources \
            || kubectl get pod -o name | grep basic-example-apiserver | xargs -I {} kubectl logs {} -c apiserver
          kubectl create -f sample/festival.yaml

          sleep 5 # Hold for 1min
          kubectl get festival festival-example -o jsonpath="{.spec.invited}" | grep 1 # successfully processed by controller
